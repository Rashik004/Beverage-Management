<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevMvcComponent</name>
    </assembly>
    <members>
        <member name="T:DevMvcComponent.Encryption.Pbkdf2Encryption">
            <summary>
            Code Collected from : http://stackoverflow.com/questions/10168240/encrypting-decrypting-a-string-in-c-sharp
            </summary>
        </member>
        <member name="M:DevMvcComponent.Extensions.CollectionExtension.GetAsCommaSeperatedValues``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.String)">
            <summary>
                Returns a string of comma separated values(CSV)
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="list"></param>
            <param name="selectStatement"></param>
            <param name="defaultValue">Default value to return when there list is null or empty.</param>
            <returns>Returns a string of comma separated values(CSV)</returns>
        </member>
        <member name="T:DevMvcComponent.Miscellaneous.DirectoryExtension">
            <summary>
            Directory extensions
            Consist of solutions http://stackoverflow.com/questions/6041332/best-way-to-get-application-folder-path
            </summary>
        </member>
        <member name="M:DevMvcComponent.Miscellaneous.DirectoryExtension.GetBaseOrAppDirectory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Miscellaneous.DirectoryExtension.GetCurrentDirectory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Miscellaneous.DirectoryExtension.GetWebAppRootDirectory">
            <summary>
            Returns web's root directory absolute location.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Miscellaneous.DirectoryExtension.GetWebAppDirectory(System.String)">
            <summary>
            Get web directory absolute path.
            </summary>
            <param name="relativePath">Give web directory relative path using telda sign, E.g. ~\AppData</param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Miscellaneous.DirectoryExtension.GetAllDirectoriesList">
            <summary>
            Get a string display what all methods returns.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevMvcComponent.Extensions.OneTypeToAnother">
            <summary>
                Convert one entity to another if there is matching properties.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DevMvcComponent.Extensions.OneTypeToAnother.Cast``2(``0)" -->
        <member name="M:DevMvcComponent.Extensions.OneTypeToAnother.ToBytesArray(System.Object)">
            <summary>
                Object to binary 
            </summary>
            <param name="obj">Must be a Serializable object.</param>
            <returns>Returns : null if given object is null.</returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.OneTypeToAnother.BinaryToObject(System.Byte[])">
            <summary>
                Read Binary to Object
            </summary>
            <param name="arrBytes"></param>
            <returns></returns>
        </member>
        <member name="T:DevMvcComponent.Extensions.StringExtension">
            <summary>
            String extensions
            </summary>
        </member>
        <member name="M:DevMvcComponent.Extensions.StringExtension.DependingStringConcat(System.String,System.String[])">
            <summary>
            Concat otherstrings if first one is not null.
            </summary>
            <param name="currentString"></param>
            <param name="otherStrings"></param>
            <returns>Returns : Empty string ("") if current string is null.</returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.StringExtension.GetStringCutOff(System.String,System.Nullable{System.Int32})">
            <summary>
                Split the string into pieces.
            </summary>
            <param name="str"></param>
            <param name="length">If string len is less then return whole string. Null means whole len.</param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.StringExtension.GetStringCutOff(System.String,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="str"></param>
            <param name="starting">If previous mid was on 100 , start from 100</param>
            <param name="length">-1 means whole return last len.</param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.StringExtension.FirstCharUppercase(System.String)">
            <summary>
            First char upper case and others are in lowercase
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.StringExtension.ToInt(System.String,System.Int32)">
            <summary>
            Returns given parameter(0) if can't convert to an int.
            </summary>
            <param name="value"></param>
            <param name="defaultParameter">Your default parameter to receive when can't convert to number.</param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.StringExtension.ToLong(System.String,System.Int64)">
            <summary>
            Returns given parameter(0) if can't convert to an long.
            </summary>
            <param name="value"></param>
            <param name="defaultParameter">Your default parameter to receive when can't convert to number.</param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.StringExtension.ToDecimal(System.String,System.Decimal)">
            <summary>
            Returns given parameter(0) if can't convert to an decimal.
            </summary>
            <param name="value"></param>
            <param name="defaultParameter">Your default parameter to receive when can't convert to number.</param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.StringExtension.ToDouble(System.String,System.Double)">
            <summary>
            Returns given parameter(0) if can't convert to an decimal.
            </summary>
            <param name="value"></param>
            <param name="defaultParameter">Your default parameter to receive when can't convert to number.</param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.StringExtension.IsNumber(System.String)">
            <summary>
                If data type is number(int, decimal, float or single etc...) then return true.
            </summary>
            <param name="value"></param>
            <returns>Returns : true if data-type is number(int, decimal, float or single etc...)</returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.StringExtension.IsNonFloatingPointNumber(System.String)">
            <summary>
                If data type is floating point(double, decimal, float, single byte) then return true.
            </summary>
            <param name="value"></param>
            <returns>Returns : true if floating point(double, decimal, float, single byte)</returns>
        </member>
        <member name="T:DevMvcComponent.Hashing.BaseHasher">
            <summary>
            Basic Hasher
            </summary>
        </member>
        <member name="M:DevMvcComponent.Hashing.BaseHasher.GetStream(System.String)">
            <summary>
            
            </summary>
            <param name="fileLocation"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.BaseHasher.GetHash(System.String)">
            <summary>
            Get hash string based on the hasher type
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.BaseHasher.GetFileCheckSum(System.String)">
            <summary>
            Get file hash string based on the hasher type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.BaseHasher.VerifyHash(System.String,System.String)">
            <summary>
            Verify hash based on the hasher type
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevMvcComponent.Hashing.Hasher">
            <summary>
            Hash any thing or set of arguments
            </summary>
        </member>
        <member name="M:DevMvcComponent.Hashing.Hasher.Get(System.Object[])">
            <summary>
                Checks nulls and returns only codes for existing ones.
            </summary>
            <param name="o">Your hashing parameters</param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.Hasher.GetFileHash(System.IO.Stream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Get any file hash with given parameters.
            </summary>
            <param name="s"></param>
            <param name="hasher"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.Hasher.GetMd5(System.String)">
            <summary>
                Checks nulls and returns only codes for existing ones.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.Hasher.GetSha1(System.String)">
            <summary>
                Checks nulls and returns only codes for existing ones.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.Hasher.IsSameUsingCookie(System.String,System.Object[])">
            <summary>
                Checks previous has with current hash token via Cookie.
            </summary>
            <param name="cookieName">A unique cookie name from your application to check if this current Hash is same as previous.</param>
            <param name="o">Your hashing parameters</param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.Hasher.IsSameUsingCache(System.String,System.Object[])">
            <summary>
                Checks previous hash with current hash token via cache.
                Warning: Cache is application specific, to have client specific cache use parameter to pass client id or user id.
            </summary>
            <param name="cacheName">A unique cache name from your application to check if this current Hash is same as previous.</param>
            <param name="o">Your hashing parameters</param>
            <returns></returns>
        </member>
        <member name="T:DevMvcComponent.Hashing.Sha1Hasher">
            <summary>
                Generates clean MD5 code.
            </summary>
        </member>
        <member name="M:DevMvcComponent.Hashing.Sha1Hasher.GetHash(System.String)">
            <summary>
            Get hash string based on the hasher type
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.Sha1Hasher.GetFileCheckSum(System.String)">
            <summary>
            Get file hash string based on the hasher type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevMvcComponent.Hashing.Md5Hasher">
            <summary>
                Generates clean MD5 code.
            </summary>
        </member>
        <member name="M:DevMvcComponent.Hashing.Md5Hasher.GetFileCheckSumAsBytes(System.String)">
            <summary>
            Get a MD5 checksum byte array from file.
            </summary>
            <param name="fileLocation"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.Md5Hasher.GetFileCheckSum(System.String)">
            <summary>
            Get a MD5 checksum byte array from file.
            </summary>
            <param name="fileLocation"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.Md5Hasher.GetMd5Hash(System.Security.Cryptography.MD5,System.String)">
            <summary>
            </summary>
            <param name="md5Hash"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Hashing.Md5Hasher.GetHash(System.String)">
            <summary>
            Get hash string based on the hasher type
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevMvcComponent.EntityConversion.ObjectToArrary">
            <summary>
                Generates any class to ObjectProperty data type
            </summary>
        </member>
        <member name="M:DevMvcComponent.EntityConversion.ObjectToArrary.Get(System.Object)">
            <summary>
                Generates any class to ObjectProperty data type
            </summary>
            <param name="Class">Give any class object to retrieve it's property and values.</param>
            <returns></returns>
        </member>
        <member name="T:DevMvcComponent.Global.Constants">
            <summary>
                Global constants for this component
            </summary>
        </member>
        <member name="F:DevMvcComponent.Global.Constants.Changed">
            <summary>
                Changed
            </summary>
        </member>
        <member name="F:DevMvcComponent.Global.Constants.UnChanged">
            <summary>
                UnChanged
            </summary>
        </member>
        <member name="T:DevMvcComponent.DataTypeFormat.ObjectProperty">
            <summary>
                Class property name and values object type.
            </summary>
        </member>
        <member name="P:DevMvcComponent.DataTypeFormat.ObjectProperty.Name">
            <summary>
                Single property name of the class
            </summary>
        </member>
        <member name="P:DevMvcComponent.DataTypeFormat.ObjectProperty.Value">
            <summary>
                Property value.
            </summary>
        </member>
        <member name="T:DevMvcComponent.Mail.MailSendingWrapper">
            <summary>
            Mail sending wrapper.
            </summary>
        </member>
        <member name="M:DevMvcComponent.Mail.MailSendingWrapper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevMvcComponent.Mail.MailSendingWrapper.#ctor(System.Net.Mail.SmtpClient,System.Net.Mail.MailMessage)">
            <summary>
            
            </summary>
            <param name="server"></param>
            <param name="message"></param>
        </member>
        <member name="P:DevMvcComponent.Mail.MailSendingWrapper.MailMessage">
            <summary>
            Mail message, contains mail body , subject and etc.
            </summary>
        </member>
        <member name="P:DevMvcComponent.Mail.MailSendingWrapper.MailServer">
            <summary>
            A type of mail sender or mail server.
            It will send the email.
            It also contains the credentials.
            </summary>
        </member>
        <member name="T:DevMvcComponent.Extensions.BinaryFileExtenstion">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevMvcComponent.Extensions.BinaryFileExtenstion.IsFileLocked(System.IO.FileInfo)">
            <summary>
            Returns : true if file is being used or being processed by another thread.
            </summary>
            <param name="file"></param>
            <returns>Returns : true if file is being used or being processed by another thread.</returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.BinaryFileExtenstion.IsFileLocked(System.String)">
            <summary>
            Returns : true if file is being used or being processed by another thread.
            </summary>
            <param name="fileName">Absolute file location.</param>
            <returns>Returns : true if file is being used or being processed by another thread.</returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.BinaryFileExtenstion.SaveAsBinary(System.Object,System.String)">
            <summary>
                Save any object into file over the previous one.
                If object is null then don't save anything.
            </summary>
            <param name="fileNamelocation">Should contain extension(ex. text.txt) .Relative file location  from root + additonroot</param>
            <param name="anyObject">Could be array or list or anything.</param>
        </member>
        <member name="M:DevMvcComponent.Extensions.BinaryFileExtenstion.SaveAsBinaryAsync(System.Object,System.String)">
            <summary>
                Save any object into file over the previous one.
                If object is null then don't save anything.
                Warning: It also checks if the file is locked or not, 
                    so if found locked then it will try again with 1 sec interval and continuously for 300 times.
            </summary>
            <param name="fileNamelocation">Direct file location with it's extension.</param>
            <param name="anyObject">Could be array or list or anything.</param>
        </member>
        <member name="M:DevMvcComponent.Extensions.BinaryFileExtenstion.ReadfromBinary(System.Object,System.String)">
            <summary>
                Save any object into file over the previous one.
                If object is null then don't save anything.
            </summary>
            <param name="fileNamelocation">Direct file location with it's extension.</param>
            <param name="anyObject">Saving item. Could be array or list or anything.</param>
        </member>
        <member name="T:DevMvcComponent.Miscellaneous.HtmlHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevMvcComponent.Miscellaneous.HtmlHelper.GetCommonStyles(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Get common styles string value pair.
            </summary>
            <param name="backgroundColor">Pass only background color-value if exist.  Eg. black</param>
            <param name="color">Pass only color-value if exist. Eg. white</param>
            <param name="margin">Pass only (margin-value: top right bottom left) if exist. Eg. 2px 2px 2px 2px</param>
            <param name="padding">Pass only (padding-value: top right bottom left) if exist.</param>
            <param name="borderRadius">Pass only (border-radius-value: value) if exist.</param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Miscellaneous.HtmlHelper.GetTag(System.String,System.String,System.String,System.Object)">
            <summary>
            Get tag (not self closing) with Html contents
            </summary>
            <param name="tag">Tag name</param>
            <param name="content">Content of html</param>
            <param name="styles">Give only style values</param>
            <param name="htmlAttributes">Your html attributes</param>
            <returns>return Html string.</returns>
        </member>
        <member name="M:DevMvcComponent.Miscellaneous.HtmlHelper.GetTagSelfClose(System.String,System.String,System.String,System.Object)">
            <summary>
            Get self closing tag with html contents.
            </summary>
            <param name="tag">Tag name</param>
            <param name="content">Content of html</param>
            <param name="styles">Give only style values</param>
            <param name="htmlAttributes">Your html attributes</param>
            <returns>return Html string.</returns>
        </member>
        <member name="M:DevMvcComponent.Miscellaneous.HtmlHelper.GetTag(System.Boolean,System.String,System.String,System.String,System.Object)">
            <summary>
            Get a tag with Html contents.
            </summary>
            <param name="selfClosing">Is it self closing or not.</param>
            <param name="tag">Tag name</param>
            <param name="content">Content of html</param>
            <param name="styles">Give only style values</param>
            <param name="htmlAttributes">Your html attributes</param>
            <returns>return Html string.</returns>
        </member>
        <member name="T:DevMvcComponent.Pagination.Pagination">
            <summary>
                Generates pagination
            </summary>
        </member>
        <member name="M:DevMvcComponent.Pagination.Pagination.GetPageData``1(System.Collections.Generic.IList{``0},System.String,System.Nullable{System.Int32}@,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Get pagination data based on the page number with cached pages count.
                Default items limit is 50.
            </summary>
            <param name="entities">Send Entities as List</param>
            <param name="pages">
                Send a ref of integer to get the pages number. It will be generated from method. Use it to generate
                pages. It indicated how many pages exist
            </param>
            <param name="page">Based on the page number it returns data. </param>
            <param name="items">
                How many items should a page contain? (Default is 30 defined in the PageItems Property of the
                class)
            </param>
            <param name="cacheName">Create cache by this exact same name. If null then no cache created.</param>
            <param name="retrivePagesExist">
                If false then no count query will be executed. If yes then count query will only
                generated if needed and not exist in the cache.
            </param>
            <returns>IEnumerable data based on the page number.</returns>
        </member>
        <member name="M:DevMvcComponent.Pagination.Pagination.GetPageData``1(System.Collections.Generic.IList{``0},DevMvcComponent.Pagination.PaginationInfo,System.String,System.Boolean)">
            <summary>
                Get pagination data based on the page number with cached pages count.
                Default items limit is 50.
            </summary>
            <param name="entities">Send Entities as IList</param>
            <param name="pageInfo">
                Send a ref of integer to get the pages number. It will be generated from method. Use it to
                generate pages. It indicated how many pages exist
            </param>
            <param name="cacheName">Create cache by this exact same name. If null then no cache created.</param>
            <param name="retrivePagesExist">
                If false then no count query will be executed. If yes then count query will only
                generated if needed and not exist in the cache.
            </param>
            <returns>IEnumerable data based on the page number.</returns>
        </member>
        <member name="M:DevMvcComponent.Pagination.Pagination.GetPageData``1(System.Linq.IQueryable{``0},System.String,System.Nullable{System.Int32}@,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Get pagination data based on the page number with cached pages count.
                Default items limit is 50.
            </summary>
            <param name="entities">Sent Entities as IQueryable</param>
            <param name="pages">
                Send a ref of integer to get the pages number. It will be generated from method. Use it to generate
                pages. It indicated how many pages exist
            </param>
            <param name="page">Based on the page number it returns data. </param>
            <param name="items">
                How many items should a page contain? (Default is 30 defined in the PageItems Property of the
                class)
            </param>
            <param name="cacheName">Create cache by this exact same name. If null then no cache created.</param>
            <param name="retrivePagesExist">
                If false then no count query will be executed. If yes then count query will only
                generated if needed and not exist in the cache.
            </param>
            <returns>IQueryable data based on the page number.</returns>
        </member>
        <member name="M:DevMvcComponent.Pagination.Pagination.GetPageData``1(System.Linq.IQueryable{``0},DevMvcComponent.Pagination.PaginationInfo,System.String,System.Boolean)">
            <summary>
                Get pagination data based on the page number with cached pages count.
                Default items limit is 50.
            </summary>
            <param name="entities">Sent Entities as IQueryable</param>
            <param name="pageInfo">
                Send a ref of integer to get the pages number. It will be generated from method. Use it to
                generate pages. It indicated how many pages exist
            </param>
            <param name="cacheName">Create cache by this exact same name. If null then no cache created.</param>
            <param name="retrivePagesExist">
                If false then no count query will be executed. If yes then count query will only
                generated if needed and not exist in the cache.
            </param>
            <returns>IQueryable data based on the page number.</returns>
        </member>
        <member name="M:DevMvcComponent.Pagination.Pagination.GetList(DevMvcComponent.Pagination.PaginationInfo,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
                Generates list items with unordered list with bootstrap pagination.
            </summary>
            <param name="pageInfo"></param>
            <param name="url"></param>
            <param name="content"></param>
            <param name="title"></param>
            <param name="unorderedListClass"></param>
            <param name="withoutUnorderedList"></param>
            <param name="liClass"></param>
            <param name="cacheName"></param>
            <param name="class"></param>
            <param name="maxNumbersOfPagesShow"></param>
            <param name="format"></param>
            <param name="activeClass"></param>
            <returns></returns>
        </member>
        <member name="P:DevMvcComponent.Pagination.Pagination.PageItems">
            <summary>
                Total number of items in a page.
                Default items limit is 50.
            </summary>
        </member>
        <member name="P:DevMvcComponent.Pagination.PaginationInfo.ItemsInPage">
            <summary>
                Set from user side to indicate the user numbers.
            </summary>
        </member>
        <member name="P:DevMvcComponent.Pagination.PaginationInfo.PagesExists">
            <summary>
                Receive from method
            </summary>
        </member>
        <member name="P:DevMvcComponent.Pagination.PaginationInfo.PageNumber">
            <summary>
                Set from user side. To get the items for that page.
            </summary>
        </member>
        <member name="T:DevMvcComponent.Processor.CacheProcessor">
            <summary>
                Default Sliding 2 Hours
                Default Expiration 5 Hours
            </summary>
        </member>
        <member name="F:DevMvcComponent.Processor.CacheProcessor._defaultCacheDependency">
            <summary>
                Will be maintained by each db table as single file single text in a
                specific folder.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Processor.CacheProcessor._defaultSliding">
            <summary>
                Time between inserted and last access
            </summary>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.Get(System.String)">
            <summary>
            Retrieve the cache value.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.GetString(System.String)">
            <summary>
            Retrieve the cache value as string or null.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.#ctor">
            <summary>
                Default expiration on +8 hours
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="expiration">in mins</param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.#ctor(System.Int32,System.Int32)">
            <summary>
                Instantiate CacheProssor
            </summary>
            <param name="context"></param>
            <param name="expiration">in mins</param>
            <param name="sliding">[in mins] If data is not accessed for certain time , then it will be removed from cache.</param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Instantiate CacheProssor
            </summary>
            <param name="context"></param>
            <param name="cacheName"></param>
            <param name="expiration">in mins</param>
            <param name="sliding">
                Change Default Sliding: If data is not accessed for certain time , then it will be removed from
                cache. [in mins]
            </param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.#ctor(System.String,System.Int32)">
            <summary>
                Instantiate CacheProssor
            </summary>
            <param name="context"></param>
            <param name="cacheName"></param>
            <param name="expiration">in mins</param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.Set(System.String,System.Object)">
            <summary>
                Save cache. No Expiration and no sliding.
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.Set(System.String,System.Object,System.String)">
            <summary>
                Save object as cache.
            </summary>
            <param name="key">Key object to look for.</param>
            <param name="data">Save any type of data.</param>
            <param name="tableName">
                Name of the table to create dependencies in file (AppData\DatabaseTables\table.table). Change
                the file manually if table is updated.
            </param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.Set(System.String,System.Object,System.Int32)">
            <summary>
                Save object as cache.
            </summary>
            <param name="key">Key object to look for.</param>
            <param name="data">Save any type of data.</param>
            <param name="expires">[in mins]</param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.Set(System.String,System.Object,System.Int32,System.String)">
            <summary>
                Save object as cache.
            </summary>
            <param name="key">Key object to look for.</param>
            <param name="data">Save any type of data.</param>
            <param name="sliding">[in mins]If data is not accessed for certain time then it will be deleted from the cache memory.</param>
            <param name="tableName">Name of the table for dependency.</param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.Set(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Web.Caching.CacheItemPriority)">
            <summary>
                Save object as cache.
            </summary>
            <param name="key">Key object to look for.</param>
            <param name="data">Save any type of data.</param>
            <param name="expires">[in mins]</param>
            <param name="sliding">[in mins]If data is not accessed for certain time then it will be deleted from the cache memory.</param>
            <param name="tableName">
                Name of the table to create dependencies in file (AppData\DatabaseTables\table.table). Change
                the file manually if table is updated.
            </param>
            <param name="priority"></param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.Set(System.String,System.Object,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Web.Caching.CacheDependency,System.Web.Caching.CacheItemPriority)">
            <summary>
                Save object as cache.
            </summary>
            <param name="key">Key object to look for.</param>
            <param name="data">Save any type of data.</param>
            <param name="expires">If put expire then don't put sliding</param>
            <param name="sliding">If data is not accessed for certain time then it will be deleted from the cache memory.</param>
            <param name="cacheDependency">New dependency cache.</param>
            <param name="priority"></param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.Set(System.String,System.Object,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Web.Caching.CacheDependency,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
                Save object as cache.
            </summary>
            <param name="key">Key object to look for.</param>
            <param name="data">Save any type of data.</param>
            <param name="expires">If put expire then don't put sliding</param>
            <param name="sliding">If data is not accessed for certain time then it will be deleted from the cache memory.</param>
            <param name="cacheDependency">New dependency cache.</param>
            <param name="priority"></param>
            <param name="onRemoveMethod">on remove method name</param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.TableStatusSetChanged(System.String)">
            <summary>
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.TableStatusSetUnChanged(System.String)">
            <summary>
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:DevMvcComponent.Processor.CacheProcessor.TableStatusCheck(System.String)">
            <summary>
                No update in the table since the cache.
                True : No-Update, False: Updated.
            </summary>
            <param name="table"></param>
            <returns>True : No-Update, False: Updated.</returns>
        </member>
        <member name="P:DevMvcComponent.Processor.CacheProcessor.Item(System.String)">
            <summary>
            Sets and retrieves Cache
            </summary>
            <param name="cacheName"></param>
        </member>
        <member name="T:DevMvcComponent.Config">
            <summary>
                Must setup this class.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Config.DeveloperEmails">
            <summary>
                Developer email
            </summary>
        </member>
        <member name="F:DevMvcComponent.Config.Assembly">
            <summary>
                Sets Assembly = Assembly.GetExecutingAssembly();
            </summary>
        </member>
        <member name="F:DevMvcComponent.Config.ApplicationName">
            <summary>
                Running application name
            </summary>
        </member>
        <member name="F:DevMvcComponent.Config.IsNotifyDeveloper">
            <summary>
                Notify Developer on Error if true.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DevMvcComponent.Config.GetAssemblyAttribute``1(System.Func{``0,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:DevMvcComponent.Config.GetAssemblyAttribute``1(System.Reflection.Assembly,System.Func{``0,System.String})" -->
        <member name="M:DevMvcComponent.Config.GetBold(System.String)">
            <summary>
            Wraps with strong tag.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Config.GetApplicationNameHtml(System.Boolean)">
            <summary>
                Attach application information from the AssemblyInfo given the Assembly = Assembly.GetExecutingAssembly().
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevMvcComponent.Config.CommonStyles">
            <summary>
            Common margin and padding style for email.
             ";margin-top: 12px; padding: 11px; border-radius: 4px;'"
            </summary>
        </member>
        <member name="T:DevMvcComponent.Processor.CookieProcessor">
            <summary>
                Set cookies in response
                Retrieve cookies from request.
            </summary>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Remove(System.String)">
            <summary>
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.#ctor(System.String)">
            <summary>
                Pass Base.ControllerContext
            </summary>
            <param name="cookieName">Pass the default cookie name.</param>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Save(System.Object)">
            <summary>
                Add object to cookies whether exist or not.
            </summary>
            <param name="Object"></param>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Save(System.Object,System.String)">
            <summary>
                Add object to cookies whether exist or not.
                Default expiration is +5 Hours.
            </summary>
            <param name="Object">Pass the object.</param>
            <param name="cookie">Name of the cookie</param>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Save(System.Object,System.Boolean)">
            <summary>
                Save a single object as cookie.
                Save in Response.
                Default expiration is +5 Hours.
            </summary>
            <param name="Object">Pass the object</param>
            <param name="checkBeforeExist">Don't save if already exist.</param>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Save(System.Object,System.String,System.Nullable{System.DateTime})">
            <summary>
                Save a single object as cookie.
                Save in Response.
            </summary>
            <param name="Object">Pass the object</param>
            <param name="cookieName">Cookie name , pass null if constructor CookieName is valid.</param>
            <param name="expiration"></param>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Save(System.Object,System.String,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
                Save a single object as cookie.
                Save in Response.
            </summary>
            <param name="Object">Pass the object</param>
            <param name="cookieName">Cookie name , pass null if constructor CookieName is valid.</param>
            <param name="checkBeforeExist">True: Don't save if already exist. </param>
            <param name="expiration"></param>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Get">
            <summary>
                Get Default cookie string value.
            </summary>
            <returns>GetDefault cookie string value.</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Get(System.String)">
            <summary>
                Get Default cookie string value.
            </summary>
            <returns>GetDefault cookie string value.</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Set(System.String,System.String)">
            <summary>
                Save cookie. +5 hours expiration.
            </summary>
            <returns>GetDefault cookie string value.</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Set(System.String,System.String,System.DateTime)">
            <summary>
                Save cookie. +5 hours expiration.
            </summary>
            <returns>GetDefault cookie string value.</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Read">
            <summary>
                Read cookie from request.
            </summary>
            <returns>Returns string or null.</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.Read(System.String)">
            <summary>
                Read cookie from request.
            </summary>
            <param name="cookieName"></param>
            <returns>Return object or null.</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.ReadString(System.String)">
            <summary>
                Read cookie from request.
            </summary>
            <param name="cookieName"></param>
            <returns>Returns string or null.</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.ReadString">
            <summary>
                Read cookie from request.
            </summary>
            <returns>Returns string or null.</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.ReadBool(System.String)">
            <summary>
                Read cookie from request.
            </summary>
            <param name="cookieName"></param>
            <returns>Returns Boolean.</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.ReadDecimal(System.String)">
            <summary>
                Read cookie from request.
            </summary>
            <param name="cookieName"></param>
            <returns>Returns decimal.</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.ReadLong(System.String)">
            <summary>
                Read cookie from request.
            </summary>
            <param name="cookieName"></param>
            <returns>Returns long</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.ReadInt(System.String)">
            <summary>
                Read cookie from request.
            </summary>
            <param name="cookieName"></param>
            <returns>Returns int.</returns>
        </member>
        <member name="M:DevMvcComponent.Processor.CookieProcessor.ReadDateTime(System.String)">
            <summary>
                Read cookie from request.
            </summary>
            <param name="cookieName"></param>
            <returns>Return Date time or null.</returns>
        </member>
        <member name="P:DevMvcComponent.Processor.CookieProcessor.Item(System.String)">
            <summary>
            Sets and retrieves Cookie as string only.
            </summary>
            <param name="cookieName"></param>
        </member>
        <member name="T:DevMvcComponent.DataTypeFormat.TypeChecker">
            <summary>
                Data type supporting class, which check whether
                the data type is known(Guid, Datetime, number etc...) or a custom type.
                If known then get the value for other task.
            </summary>
        </member>
        <member name="M:DevMvcComponent.DataTypeFormat.TypeChecker.IsPrimitiveOrGuid(System.Object)">
            <summary>
                If data type is known(Guid, Datetime, number etc...) or primitive then returns true.
                It only detects which data-types can be directly converted to string.
            </summary>
            <param name="o"></param>
            <returns>Returns : true if data-type is primitive type or Guid (check MSDN for more info)</returns>
        </member>
        <member name="M:DevMvcComponent.DataTypeFormat.TypeChecker.IsNumber(System.Object)">
            <summary>
                If data type is number(int, decimal, float or single etc...) then return true.
            </summary>
            <param name="o"></param>
            <returns>Returns : true if data-type is number(int, decimal, float or single etc...)</returns>
        </member>
        <member name="M:DevMvcComponent.DataTypeFormat.TypeChecker.IsStringNumber(System.String)">
            <summary>
                If data type is number(int, decimal, float or single etc...) then return true.
            </summary>
            <param name="o"></param>
            <returns>Returns : true if data-type is number(int, decimal, float or single etc...)</returns>
        </member>
        <member name="M:DevMvcComponent.DataTypeFormat.TypeChecker.IsIntOrLongOrByte(System.Object)">
            <summary>
                If data type is non-floating point(long,int,single, byte) number then return true.
            </summary>
            <param name="o"></param>
            <returns>Returns : true if data-type is non-floating point(long,int,single, byte)</returns>
        </member>
        <member name="M:DevMvcComponent.DataTypeFormat.TypeChecker.IsNonFloatingPointNumber(System.Object)">
            <summary>
                If data type is non-floating point(long,int,single, byte) number then return true.
            </summary>
            <param name="o"></param>
            <returns>Returns : true if data-type is non-floating point(long,int,single, byte)</returns>
        </member>
        <member name="M:DevMvcComponent.DataTypeFormat.TypeChecker.IsStringNonFloatingPointNumber(System.String)">
            <summary>
                If data type is non-floating point(long,int,single, byte) number then return true.
            </summary>
            <param name="o"></param>
            <returns>Returns : true if data-type is non-floating point(long,int,single, byte)</returns>
        </member>
        <member name="M:DevMvcComponent.DataTypeFormat.TypeChecker.IsDoubleOrDecimalOrFloat(System.Object)">
            <summary>
                If data type is floating point(double, decimal, float, single byte) then return true.
            </summary>
            <param name="o"></param>
            <returns>Returns : true if floating point(double, decimal, float, single byte)</returns>
        </member>
        <member name="M:DevMvcComponent.DataTypeFormat.TypeChecker.IsFloatingPointNumber(System.Object)">
            <summary>
                If data type is floating point(double, decimal, float, single byte) then return true.
            </summary>
            <param name="o"></param>
            <returns>Returns : true if floating point(double, decimal, float, single byte)</returns>
        </member>
        <member name="T:DevMvcComponent.EntityConversion.EntityToString">
            <summary>
                Convert any database entity to html string for email sending.
            </summary>
        </member>
        <member name="F:DevMvcComponent.EntityConversion.EntityToString.FontCss">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.EntityConversion.EntityToString.TableCss">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.EntityConversion.EntityToString.ThCss">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.EntityConversion.EntityToString.TdCss">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.EntityConversion.EntityToString.TableCaptionCss">
            <summary>
            </summary>
        </member>
        <member name="M:DevMvcComponent.EntityConversion.EntityToString.Get(System.Object)">
            <summary>
                Get simple string of a single class object
            </summary>
            <param name="Class">Any entity object , can be null.</param>
            <returns>Returns property and value string combination, returns empty string if class is null or doesn't have any valid properties to display.</returns>
        </member>
        <member name="M:DevMvcComponent.EntityConversion.EntityToString.GetHtmlOfSingleClassAsTable(System.Object)">
            <summary>
                Get simple Html string of a single class object with only new lines
            </summary>
            <param name="Class">Any entity object , can be null.</param>
            <returns>Returns property and value string combination, returns empty string if class is null or doesn't have any valid properties to display.</returns>
        </member>
        <member name="M:DevMvcComponent.EntityConversion.EntityToString.GetHtmlOfSingleClass(System.Object)">
            <summary>
                Get simple Html string of a single class object with only new lines
            </summary>
            <param name="Class">Any entity object , can be null.</param>
            <returns>Returns property and value string combination, returns empty string if class is null or doesn't have any valid properties to display.</returns>
        </member>
        <member name="M:DevMvcComponent.EntityConversion.EntityToString.GetHtmlTableRow(System.Object,System.Text.StringBuilder@,System.Nullable{System.Int32})">
            <summary>
                Generating single row from a list of entities.
            </summary>
            <param name="Class">Single object</param>
        </member>
        <member name="M:DevMvcComponent.EntityConversion.EntityToString.GetHtmlTableHeader(System.Object,System.Text.StringBuilder@)">
            <summary>
                Generates the html table header rows for single class properties.
            </summary>
            <param name="Class"></param>
            <param name="sb"></param>
        </member>
        <member name="M:DevMvcComponent.EntityConversion.EntityToString.GetHtmlTableOfEntities(System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
                Get html table string of any database entity list.
            </summary>
            <param name="classes">List of items</param>
            <param name="tableCaption">Table caption for this entity.</param>
            <returns>Returns html table string of any database entity list.</returns>
        </member>
        <member name="M:DevMvcComponent.EntityConversion.EntityToString.GetHtmlOfEntitiesEmail(System.Collections.Generic.IEnumerable{System.Object},System.String,System.String,System.String)">
            <summary>
                Async: Convert database entities list to html string and then
                send to to an email.
            </summary>
            <param name="classes">List of items</param>
            <param name="email">Email address to send the email.</param>
            <param name="sub">Subject of the email.</param>
            <param name="tableCaption">Caption of the table for this entity.</param>
        </member>
        <member name="T:DevMvcComponent.Hashing.SimpleHasher">
            <summary>
                Not yet implemented
            </summary>
        </member>
        <member name="M:DevMvcComponent.Hashing.SimpleHasher.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:DevMvcComponent.Hashing.SimpleHasher.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="len"></param>
        </member>
        <member name="M:DevMvcComponent.Hashing.SimpleHasher.FormatCode(System.String)">
            <summary>
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:DevMvcComponent.Enums.ErrorType">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.ErrorType.High">
            <summary>
                High priority error.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.ErrorType.Medium">
            <summary>
                Medium priority error.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.ErrorType.Low">
            <summary>
                Low priority error.
            </summary>
        </member>
        <member name="T:DevMvcComponent.Enums.DateTimeFormatType">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.DateTimeFormatType.Date">
            <summary>
            Date format
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.DateTimeFormatType.Time">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.DateTimeFormatType.DateTimeSimple">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.DateTimeFormatType.DateTimeFull">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.DateTimeFormatType.DateTimeShort">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.DateTimeFormatType.DateTimeCustom">
            <summary>
            </summary>
        </member>
        <member name="T:DevMvcComponent.Enums.MailingType">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.MailingType.RegularMail">
            <summary>
            Regular email category
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.MailingType.CarbonCopy">
            <summary>
            Carbon copy email category
            </summary>
        </member>
        <member name="F:DevMvcComponent.Enums.MailingType.MailBlindCarbonCopy">
            <summary>
            Blind carbon copy category.
            </summary>
        </member>
        <member name="T:DevMvcComponent.DataTypeFormat.BasicError">
            <summary>
            </summary>
        </member>
        <member name="P:DevMvcComponent.DataTypeFormat.BasicError.OrderId">
            <summary>
            </summary>
        </member>
        <member name="P:DevMvcComponent.DataTypeFormat.BasicError.ErrorMessage">
            <summary>
                What is the error and what is the cause of the error.
            </summary>
        </member>
        <member name="P:DevMvcComponent.DataTypeFormat.BasicError.Solution">
            <summary>
                Solution message
            </summary>
        </member>
        <member name="P:DevMvcComponent.DataTypeFormat.BasicError.CssClass">
            <summary>
                Specific class for this error label.
                By default :
                High : label label-danger high-priority
                Medium : label label-danger medium-priority
                low : label label-warning low-priority
            </summary>
        </member>
        <member name="P:DevMvcComponent.DataTypeFormat.BasicError.SolutionLink">
            <summary>
                Where user can solve this problem.
                Could be null or empty.
            </summary>
        </member>
        <member name="P:DevMvcComponent.DataTypeFormat.BasicError.SolutionDisplayMessage">
            <summary>
                Title attribute of the link
            </summary>
        </member>
        <member name="P:DevMvcComponent.DataTypeFormat.BasicError.Type">
            <summary>
                Type of the error
            </summary>
        </member>
        <member name="T:DevMvcComponent.Error.Handler">
            <summary>
            Error handler
            </summary>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.#ctor(System.Exception)">
            <summary>
                Sends an email to the developer if run into any errors.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.#ctor(System.Exception,System.String)">
            <summary>
                Sends an email to the developer if run into any errors.
            </summary>
            <param name="ex"></param>
            <param name="method">Method name should contains parenthesis.()</param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.#ctor(System.Exception,System.String,System.String)">
            <summary>
                Sends an email to the developer if run into any errors.
            </summary>
            <param name="ex"></param>
            <param name="method">Method name should contains parenthesis.()</param>
            <param name="subject">Email subject</param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.#ctor(System.Exception,System.String,System.Object)">
            <summary>
            </summary>
            <param name="ex"></param>
            <param name="method"></param>
            <param name="entity"></param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.#ctor(System.Exception,System.String,System.String,System.Object)">
            <summary>
                Sends an email to the developer if run into any errors.
            </summary>
            <param name="ex"></param>
            <param name="method">Method name should contains parenthesis.()</param>
            <param name="subject">Email subject</param>
            <param name="entity">Single entity data that you are trying to save. You can also pass null.</param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.HandleBy(System.Exception)">
            <summary>
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.HandleBy(System.Exception,System.String)">
            <summary>
                Sends an email to the developer if run into any errors.
            </summary>
            <param name="ex"></param>
            <param name="exception"></param>
            <param name="method">Method name should contains parenthesis.()</param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.HandleBy(System.Exception,System.String,System.String)">
            <summary>
                Sends an email to the developer if run into any errors.
            </summary>
            <param name="exception"></param>
            <param name="method">Method name should contains parenthesis.()</param>
            <param name="subject">Email subject</param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.HandleBy(System.Exception,System.String,System.Object)">
            <summary>
                Sends an email to the developer if run into any errors.
            </summary>
            <param name="exception"></param>
            <param name="method">Method name should contains parenthesis.()</param>
            <param name="entity">Single entity data that you are trying to save. You can also pass null.</param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.HandleBy(System.Exception,System.String,System.String,System.Object)">
            <summary>
                Sends an email to the developer if run into any errors.
            </summary>
            <param name="exception"></param>
            <param name="method">Method name should contains parenthesis.()</param>
            <param name="subject">Email subject</param>
            <param name="entity">Single entity data that you are trying to save. You can also pass null.</param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.GetEntityValidationHtml(System.Data.Entity.Validation.DbEntityValidationException,System.String,System.String)">
            <summary>
            </summary>
            <param name="e"></param>
            <param name="methodName"></param>
            <param name="optional"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.GetErrorMsgHtml(System.Exception,System.String,System.String)">
            <summary>
            </summary>
            <param name="e"></param>
            <param name="methodName"></param>
            <param name="optional"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.GenerateErrorBody(System.Exception,System.String@,System.String@,System.String,System.Object)">
            <summary>
            </summary>
            <param name="ex"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="method"></param>
            <param name="entitySingleObject"></param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.ByEmail(System.Exception,System.String,System.String,System.Object)">
            <summary>
                Sends an quick email to the developer.
            </summary>
            <param name="exception">Your thrown exception to log in your developers email address.</param>
            <param name="methodName">Name or the method : System.Reflection.MethodBase.GetCurrentMethod().Name or custom name or nameOf(methodName) C# 6.0</param>
            <param name="subject">Mailing subject, your app name will be included automatically.</param>
            <param name="entity">Your entity information.</param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.ByEmail(System.Exception,DevMvcComponent.Mail.MailServer,System.String,System.String,System.Object)">
            <summary>
            Send an asynchronous email to the given email addresses as carbon copy.
            </summary>
            <param name="exception">Your thrown exception to log in your developers email address.</param>
            <param name="mailServer">You can pass your custom mailing server to send the mail from.</param>
            <param name="methodName">Name or the method : System.Reflection.MethodBase.GetCurrentMethod().Name or custom name or nameOf(methodName) C# 6.0</param>
            <param name="subject">Mailing subject, your app name will be included automatically.</param>
            <param name="entity">Your entity information.</param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.ByEmail(System.Exception,System.String,System.String,System.String,System.Object)">
            <summary>
            Send an asynchronous email to the given email addresses as carbon copy.
            </summary>
            <param name="exception">Your thrown exception to log in your developers email address.</param>
            <param name="mailingAddresses">Comma separated email address.</param>
            <param name="methodName">Name or the method : System.Reflection.MethodBase.GetCurrentMethod().Name or custom name or nameOf(methodName) C# 6.0</param>
            <param name="subject">Mailing subject, your app name will be included automatically.</param>
            <param name="entity">Your entity information.</param>
        </member>
        <member name="M:DevMvcComponent.Error.Handler.ByEmail(System.Exception,System.String[],System.String,System.String,System.Object)">
            <summary>
            Send an asynchronous email to the given email addresses as carbon copy.
            </summary>
            <param name="exception">Your thrown exception to log in your developers email address.</param>
            <param name="mailingAddresses">Mailing address to send exception log as a carbon copy.</param>
            <param name="methodName">Name or the method : System.Reflection.MethodBase.GetCurrentMethod().Name or custom name or nameOf(methodName) C# 6.0</param>
            <param name="subject">Mailing subject, your app name will be included automatically.</param>
            <param name="entity">Your entity information.</param>
        </member>
        <member name="T:DevMvcComponent.Mail.CustomMailServer">
            <summary>
                Any mail server generic config methods.
                There is no need to inherit MailConfig all the time.
                Create this class with constructor parameters and
                then initialize it in the starter.
            </summary>
        </member>
        <member name="T:DevMvcComponent.Mail.MailServer">
            <summary>
                Must configure this to your smtpclient
            </summary>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.#ctor">
            <summary>
                Make sure your mail has less protection, IMAP, and pop3 set to enabled.
                By default:
                UseDefaultCredentials = false;
                EnableSsl = true;
                DeliveryMethod = SmtpDeliveryMethod.Network;
                Timeout = 10000;
            </summary>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.#ctor(System.String,System.String)">
            <summary>
            Make sure your mail has less protection, IMAP, and pop3 set to enabled.
            </summary>
            <param name="emailAddress"></param>
            <param name="password"></param>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.ChangeCredentials(System.String,System.String)">
            <summary>
                Change Credentials
            </summary>
            <param name="email"></param>
            <param name="password"></param>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.SetupCredentials">
            <summary>
                Setup credentials automatic.
            </summary>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.GetNewMailMessage(System.String,System.String,System.String,System.Boolean,System.Text.Encoding,System.Net.Mail.DeliveryNotificationOptions)">
            <summary>
            Get a new mail message.
            Use SmtpClient to send that mail message.
            </summary>
            <param name="sender">Your mail address</param>
            <param name="subject">Email subject</param>
            <param name="body">emailAddress body</param>
            <param name="isHtmlBody">By default : true</param>
            <param name="bodyEncoding">By default : Encoding.UTF8</param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.CloneSmtpClient">
            <summary>
            Copy current smtp mailer to an new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.CloneSmtpClient(System.Net.Mail.SmtpClient)">
            <summary>
            Copy any smtp mailer to an new instance.
            </summary>
            <returns>Returns a deep copy instance of the given object.</returns>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.QuickSend(System.String[],System.String,System.String,DevMvcComponent.Enums.MailingType,System.Collections.Generic.List{System.Net.Mail.Attachment},System.Boolean,System.Boolean,System.Object,System.Net.Mail.SendCompletedEventHandler)">
            <summary>
                Quickly send an emailAddress.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="type"></param>
            <param name="attachments"></param>
            <param name="isAsync"></param>
            <param name="isHtml"></param>
            <param name="userToken"></param>
            <param name="sendCompletedEventHandler"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.QuickSend(System.String,System.String,System.String,DevMvcComponent.Enums.MailingType,System.Boolean,System.Collections.Generic.List{System.Net.Mail.Attachment},System.Boolean,System.Boolean,System.Object,System.Net.Mail.SendCompletedEventHandler)">
            <summary>
                Quickly send an emailAddress.
            </summary>
            <param name="to"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="type"></param>
            <param name="searchCommas"></param>
            <param name="attachments"></param>
            <param name="isAsync"></param>
            <param name="isHtml"></param>
            <param name="userToken"></param>
            <param name="sendCompletedEventHandler"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.QuickSend(System.String,System.String,System.String,System.String,System.String,DevMvcComponent.Enums.MailingType)">
            <summary>
                Sends mail asynchronously.
            </summary>
            <param name="to">Comma to seperate multiple emailAddress addresses.</param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="from"></param>
            <param name="password"></param>
            <param name="type">Regular, CC, BCC</param>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.SendWithAttachments(System.String,System.String,System.String,System.Collections.Generic.List{System.Net.Mail.Attachment},DevMvcComponent.Enums.MailingType,System.Boolean,System.Boolean,System.Boolean,System.Object,System.Net.Mail.SendCompletedEventHandler)">
            <summary>
            Send emailAddress with attachments
            </summary>
            <param name="mailingTo"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="attachments"></param>
            <param name="type"></param>
            <param name="searchCommas"></param>
            <param name="isAsync"></param>
            <param name="isHtml"></param>
            <param name="userToken"></param>
            <param name="sendCompletedEventHandler"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.SendWithAttachments(System.String[],System.String,System.String,System.String[],System.Collections.Generic.List{System.Net.Mail.Attachment},DevMvcComponent.Enums.MailingType,System.Boolean,System.Boolean,System.Object,System.Net.Mail.SendCompletedEventHandler)">
            <summary>
            Send emailAddress with attachments
            </summary>
            <param name="mailingTos"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="ccMails"></param>
            <param name="attachments"></param>
            <param name="type"></param>
            <param name="isAsync"></param>
            <param name="isHtml">Is the body is Html or only text.</param>
            <param name="userToken"></param>
            <param name="sendCompletedEventHandler"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.SendMail(DevMvcComponent.Mail.MailSendingWrapper,System.Boolean,System.Object,System.Net.Mail.SendCompletedEventHandler)">
            <summary>
            
            </summary>
            <param name="mailWrapper"></param>
            <param name="async"></param>
            <param name="userToken"></param>
            <param name="completeEvent">
            private static void SendCompletedCallback(object sender, AsyncCompletedEventArgs e) {}
            </param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Mail.MailServer.HostSetup">
            <summary>
                Specific host setup. Must ensure the boolean isHostConfigured = true.
                Make sure your mail has less protection, IMAP, and pop3 set to enabled.
            </summary>
            <param name="host">for example gmail: smtp.gmail.com</param>
            <param name="port">for example gmail enablessl port: 587</param>
        </member>
        <member name="P:DevMvcComponent.Mail.MailServer.SenderEmailAddress">
            <summary>
                Setup credentials automatic.
            </summary>
        </member>
        <member name="P:DevMvcComponent.Mail.MailServer.SenderEmailPassword">
            <summary>
                Setup credentials automatic.
            </summary>
        </member>
        <member name="P:DevMvcComponent.Mail.MailServer.IsConfigured">
            <summary>
            </summary>
        </member>
        <member name="M:DevMvcComponent.Mail.CustomMailServer.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
                SSL true
            </summary>
            <param name="emailAddress"></param>
            <param name="password"></param>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:DevMvcComponent.Mail.CustomMailServer.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            </summary>
            <param name="emailAddress"></param>
            <param name="password"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="isSsl"></param>
        </member>
        <member name="T:DevMvcComponent.Mail.GmailServer">
            <summary>
            </summary>
        </member>
        <member name="M:DevMvcComponent.Mail.GmailServer.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:DevMvcComponent.Mail.GmailServer.#ctor(System.String,System.String)">
            <summary>
            </summary>
            <param name="emailAddress"></param>
            <param name="password"></param>
        </member>
        <member name="M:DevMvcComponent.Mail.GmailServer.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            </summary>
            <param name="emailAddress"></param>
            <param name="password"></param>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="T:DevMvcComponent.Extensions.ClassExtention">
            <summary>
                Get the list of classes to exporting format
            </summary>
        </member>
        <member name="M:DevMvcComponent.Extensions.ClassExtention.IsEmpty(System.Object)">
            <summary>
                Checks if IsNullOrWhiteSpace.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.ClassExtention.GetPropertiesNames(System.Object)">
            <summary>
                Returns null if no properties are found.
            </summary>
            <param name="objectType">Type of any object/class/</param>
            <returns>Returns the list of properties in the class.</returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.ClassExtention.GetProperties(System.Object)">
            <summary>
                Returns null if no properties are found.
            </summary>
            <param name="objectType">Type of any object/class/</param>
            <returns>Returns the list of properties in the class.</returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.ClassExtention.GetPropertiesValues(System.Object)">
            <summary>
                Returns null if no properties are found.
            </summary>
            <param name="objectType">Type of any object/class/</param>
            <returns>Returns the list of properties with values in the class.</returns>
        </member>
        <member name="M:DevMvcComponent.Extensions.ClassExtention.GetBinary(System.Object)">
            <summary>
                Returns null if no properties are found.
            </summary>
            <param name="objectType">Type of any object/class/</param>
            <returns>Returns the list of properties with values in the class.</returns>
        </member>
        <member name="T:DevMvcComponent.Mvc">
            <summary>
                It's direct singleton pattern class in C#.
                Must setup this starter class and Config class.
                Note: In java you need to follow traditional singleton pattern , 
                      however in C# you don't require that Instance variable because it already has static keyword.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Mvc.Error">
            <summary>
                Handles all kinds of errors and then finally sends an email to the client.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Mvc.Cookies">
            <summary>
            Cookies are client specific.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Mvc.Caches">
            <summary>
            Caches are application specific.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Mvc.Mailer">
            <summary>
                Must re-setup with appropriate developer credentials.
            </summary>
        </member>
        <member name="M:DevMvcComponent.Mvc.Setup(System.String,System.String,System.Reflection.Assembly,DevMvcComponent.Mail.MailServer)">
            <summary>
                Setup the component plugin.
                Please make sure that your executing directory is writable if not then please add a folder "DataCache"
            </summary>
            <param name="applicationName">Name of your application or software.</param>
            <param name="developerEmail">Comma separated developers emails</param>
            <param name="assembly">Usually set to "System.Reflection.Assembly.GetExecutingAssembly()"</param>
            <param name="mailer">
                Get your own custom mailer or GmailConfig or setup CustomConfig.
                new DevMVCComponent.Mailers.GmailConfig("senderEmail","Password")
            </param>
        </member>
        <member name="M:DevMvcComponent.Mvc.Setup(System.Reflection.Assembly)">
            <summary>
                Setup the component plugin.
                Please make sure that your executing directory is writable if not then please add a folder "DataCache"
                ** Warning : By this instantiation you can't handle exception by email or send quick emails through Starter.Mailer.SendQuick(..) **
            </summary>
            <param name="assembly">Usually set to "System.Reflection.Assembly.GetExecutingAssembly()"</param>
        </member>
        <member name="M:DevMvcComponent.Mvc.Setup(System.String,System.String,System.Reflection.Assembly,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
                Setup the component plugin.
                Please make sure that your executing directory is writable if not then please add a folder "DataCache"
            </summary>
            <param name="applicationName">Name of your application or software.</param>
            <param name="developerEmail">Developer email</param>
            <param name="assembly">Usually set to "System.Reflection.Assembly.GetExecutingAssembly()"</param>
            <param name="senderEmail">Smtp sender email address.</param>
            <param name="senderPassword">Smtp sender password.</param>
            <param name="hostName">host name, i.e. smtp.gmail.com</param>
            <param name="senderPort">port number</param>
            <param name="isSsl"></param>
        </member>
        <member name="T:DevMvcComponent.Error.ErrorCollector">
            <summary>
            </summary>
        </member>
        <member name="F:DevMvcComponent.Error.ErrorCollector.HighRiskCssClass">
            <summary>
            High risk error css class.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Error.ErrorCollector.MidRiskCssClass">
            <summary>
            Medium risk error css class.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Error.ErrorCollector.LowRiskCssClass">
            <summary>
            Low risk error css class.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Error.ErrorCollector.SolutionStateCssClass">
            <summary>
            Solution message css class.
            </summary>
        </member>
        <member name="F:DevMvcComponent.Error.ErrorCollector.SolutionStateLinkCssClass">
            <summary>
            Solution link css class.
            </summary>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="def"></param>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.GetCssClassForError(DevMvcComponent.DataTypeFormat.BasicError)">
            <summary>
                Get cssClass class names
            </summary>
            <param name="e"></param>
            <returns>
                By default :
                High : label label-danger high-priority
                Medium : label label-danger medium-priority
                low : label label-warning low-priority
            </returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.IsExist">
            <summary>
                Is any error exist in the list?
            </summary>
            <returns>Returns true if any error exist.</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.Add(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                add error message with low priority
            </summary>
            <param name="msg">set your message.</param>
            <param name="cssClass">
                Specific class for this error label.
                By default :
                High : label label-danger high-priority
                Medium : label label-danger medium-priority
                low : label label-warning low-priority
            </param>
            <param name="solution">error solution message</param>
            <param name="link">error solution solutionLink</param>
            <param name="solutionDisplayMessage">Error solution solutionLink title attribute</param>
            <returns>returns the order of the error.</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.AddHigh(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                add error message with high priority
            </summary>
            <param name="msg">set your message.</param>
            <param name="cssClass">
                Specific class for this error label.
                By default :
                High : label label-danger high-priority
                Medium : label label-danger medium-priority
                low : label label-warning low-priority
            </param>
            <param name="solution">error solution message</param>
            <param name="link">error solution solutionLink</param>
            <param name="solutionDisplayMessage">Error solution solutionLink title attribute</param>
            <returns>returns the order of the error.</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.AddMedium(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                add error message with medium priority
            </summary>
            <param name="msg">set your message.</param>
            <param name="cssClass">
                Specific class for this error label.
                By default :
                High : label label-danger high-priority
                Medium : label label-danger medium-priority
                low : label label-warning low-priority
            </param>
            <param name="solution">error solution message</param>
            <param name="link">error solution solutionLink</param>
            <param name="solutionDisplayMessage">Error solution solutionLink title attribute</param>
            <returns>returns the order of the error.</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.Add(System.String,DevMvcComponent.Enums.ErrorType,System.String,System.String,System.String,System.String)">
            <summary>
                add error message with given priority
            </summary>
            <param name="msg">set your message.</param>
            <param name="type">Type of your error message.</param>
            <param name="cssClass">
                Specific class for this error label.
                By default :
                High : label label-danger high-priority
                Medium : label label-danger medium-priority
                low : label label-warning low-priority
            </param>
            <param name="solution">error solution message</param>
            <param name="solutionLink">error solution solutionLink</param>
            <param name="solutionDisplayMessage">Error solution solutionLink title attribute</param>
            <returns>returns the order of the error.</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.GetMessages">
            <summary>
            </summary>
            <returns>Returns all error message as string list.</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.GetListItems(System.String)">
            <summary>
                Call it when printing it in the view.
            </summary>
            <returns>Returns all errors ordered by as a string list of html list item ( all classes will be added ).</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.GetErrors">
            <summary>
            </summary>
            <returns>Returns all error message as BasicError type.</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.Remove(System.Int32)">
            <summary>
                remove msg from the list
            </summary>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.Remove(System.String)">
            <summary>
                remove msg from the list
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.Clear">
            <summary>
                Clean counter and clean the error list start from 0.
            </summary>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.GetMessagesHigh">
            <summary>
            </summary>
            <returns>Returns high error message as string list.</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.GetMessagesLow">
            <summary>
            </summary>
            <returns>Returns low error message as string list.</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.GetMessagesMedium">
            <summary>
            </summary>
            <returns>Returns medium error message as string list.</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.GetMessagesSorted">
            <summary>
            </summary>
            <returns>Returns all error message as string list of sorted by order id.</returns>
        </member>
        <member name="M:DevMvcComponent.Error.ErrorCollector.GetErrorsSorted">
            <summary>
                Returns errors in sorted order.
            </summary>
            <returns>Returns errors in sorted order.</returns>
        </member>
    </members>
</doc>
